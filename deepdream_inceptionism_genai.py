# -*- coding: utf-8 -*-
"""DeepDream-Inceptionism-GenAI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMC7ZShUyRmNNdfeN6oZczI6be7SiSGy
"""

import numpy as np
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt

base_model = tf.keras.applications.InceptionV3(include_top= False,weights = 'imagenet')
base_model.summary()

len(base_model.layers)

names = ['mixed3','mixed5']

layers = [base_model.get_layer(name).output for name in  names]
layers

deep_dream_model = tf.keras.Model(inputs = base_model.input, outputs = layers)
deep_dream_model.summary()
print('The number of layers in the deep dream model is',len(deep_dream_model.layers))

from google.colab import drive
drive.mount('/content/drive')

image = tf.keras.preprocessing.image.load_img('/content/drive/MyDrive/Computer Vision Masterclass/Images/StaryNight.jpg',
                                              target_size = (225,375))
plt.imshow(image)
print(image.size)
print(type(image))

image = tf.keras.preprocessing.image.img_to_array(image)
print(image.shape)
print(type(image))

image.min(),image.max()

image = tf.keras.applications.inception_v3.preprocess_input(image)
image.min(),image.max()

deep_dream_model.outputs

image_batch = tf.expand_dims(image,axis = 0)
activations = deep_dream_model.predict(image_batch)

activations[0].shape

def calculate_loss(image,network):
  image_batch = tf.expand_dims(image,axis = 0)
  activations = network(image_batch)

  losses = []
  for act in activations:
    loss = tf.math.reduce_mean(act)
    losses.append(loss)
  return tf.reduce_sum(losses)

calculate_loss(image,deep_dream_model)

# @tf.function

# def deep_dream(image,network,learning_rate):
#   with tf.GradientTape as Tape:
#     Tape.watch(image)
#     loss = calculate_loss(image,network)

#   gradients = Tape.gradient(loss,image)
#   gradients /= tf.math.reduce_stf(gradients)
#   image = image + gradients*learning_rate
#   image = tf.clip_by_value = (image,-1,1)
#   return loss,image

@tf.function
def deep_dream(network, image, learning_rate):
  with tf.GradientTape() as tape:
    tape.watch(image)
    loss = calculate_loss(image, network)

  gradients = tape.gradient(loss, image) # Derivate
  gradients /= tf.math.reduce_std(gradients)
  image = image + gradients * learning_rate
  image = tf.clip_by_value(image, -1, 1)

  return loss, image

def inverse_transform(image):
  image = 255 * (image + 1.0) / 2.0
  return tf.cast(image, tf.uint8)

def run_deep_dream(network, image, epochs, learning_rate):
  for epoch in range(epochs):
    loss, image = deep_dream(network, image, learning_rate)

    if epoch % 200 == 0:
      plt.imshow(inverse_transform(image))
      plt.show()
      print('Epoch {}, loss {}'.format(epoch, loss))

run_deep_dream(network = deep_dream_model, image = image, epochs = 8000, learning_rate = 0.001)

image = tf.keras.preprocessing.image.load_img('/content/drive/MyDrive/Computer Vision Masterclass/Images/sky.jpeg',
                                              target_size = (225, 375))
image = tf.keras.preprocessing.image.img_to_array(image)
image = tf.keras.applications.inception_v3.preprocess_input(image)

run_deep_dream(network = deep_dream_model, image = image, epochs = 8000, learning_rate = 0.001)

image_3 = tf.keras.preprocessing.image.load_img('tajmahal.jpg',
                                              target_size = (225, 375))
image_3 = tf.keras.preprocessing.image.img_to_array(image_3)
image_3 = tf.keras.applications.inception_v3.preprocess_input(image_3)
run_deep_dream(network = deep_dream_model, image = image_3, epochs = 8000, learning_rate = 0.001)

image_4 = tf.keras.preprocessing.image.load_img('tajmahal.jpg',
                                              target_size = (225, 375))
image_4 = tf.keras.preprocessing.image.img_to_array(image_4)
image_4 = tf.keras.applications.inception_v3.preprocess_input(image_4)
run_deep_dream(network = deep_dream_model, image = image_4, epochs = 8000, learning_rate = 0.001)

image_4 = tf.keras.preprocessing.image.load_img('titaanic.jpg',
                                              target_size = (225, 375))
image_4 = tf.keras.preprocessing.image.img_to_array(image_4)
image_4 = tf.keras.applications.inception_v3.preprocess_input(image_4)
run_deep_dream(network = deep_dream_model, image = image_4, epochs = 8000, learning_rate = 0.001)

image_5 = tf.keras.preprocessing.image.load_img('dog.png',
                                              target_size = (225, 375))
image_5 = tf.keras.preprocessing.image.img_to_array(image_5)
image_5 = tf.keras.applications.inception_v3.preprocess_input(image_5)
run_deep_dream(network = deep_dream_model, image = image_5, epochs = 8000, learning_rate = 0.001)

image_6 = tf.keras.preprocessing.image.load_img('gothic princess.jpg',
                                              target_size = (225, 375))
image_6 = tf.keras.preprocessing.image.img_to_array(image_6)
image_6 = tf.keras.applications.inception_v3.preprocess_input(image_6)
run_deep_dream(network = deep_dream_model, image = image_6, epochs = 10000, learning_rate = 0.0002)

image_7 = tf.keras.preprocessing.image.load_img('family.jpg',
                                              target_size = (225, 375))
image_7 = tf.keras.preprocessing.image.img_to_array(image_7)
image_7 = tf.keras.applications.inception_v3.preprocess_input(image_7)
run_deep_dream(network = deep_dream_model, image = image_7, epochs = 10000, learning_rate = 0.0008)

image_8 = tf.keras.preprocessing.image.load_img('noodles.jpg',
                                              target_size = (225, 375))
image_8 = tf.keras.preprocessing.image.img_to_array(image_8)
image_8 = tf.keras.applications.inception_v3.preprocess_input(image_8)
run_deep_dream(network = deep_dream_model, image = image_8, epochs = 8000, learning_rate = 0.0005)

image_9 = tf.keras.preprocessing.image.load_img('trump.jpg',
                                              target_size = (225, 375))
image_9 = tf.keras.preprocessing.image.img_to_array(image_9)
image_9 = tf.keras.applications.inception_v3.preprocess_input(image_9)
run_deep_dream(network = deep_dream_model, image = image_9, epochs = 8000, learning_rate = 0.0004)